#############################################  单节点  #############################################
[root@oldboyedu conf]# cat redis_6379.conf
### 以守护进程模式启动
daemonize yes
### 绑定的主机地址，绑定这个IP地址所在的网卡
bind 10.0.0.87 127.0.0.1

### 监听端口
port 6379
### pid文件和log文件的保存地址
pidfile /opt/redis_cluster/redis_6379/pid/redis_6379.pid
logfile /opt/redis_cluster/redis_6379/logs/redis_6379.log
### 设置数据库的数量，默认数据库为0
databases 16
### 指定本地持久化文件的文件名
dbfilename redis_6379.rdb
### 本地数据库目录，主要用于存储rdb文件
dir /data/redis_cluster/redis_6379
### 是否打开aof日志功能
appendonly yes
# 每1个命令，都立即同步到aof
appendfsync always
# 每秒写1次
appendfsync everysec
# 写入工作交给操作系统，由操作系统判断缓冲区大小，统一写入到aof
appendfilename "appendonly.aof"

#############################################  主从  #############################################
[root@oldboyedu conf]# cat redis_6379.conf
### 以守护进程模式启动
daemonize yes
### 绑定的主机地址，绑定这个IP地址所在的网卡
bind 10.0.0.87 127.0.0.1
#  指定主节点
slaveof 10.0.0.88 6379
### 监听端口
port 6379
### pid文件和log文件的保存地址
pidfile /opt/redis_cluster/redis_6379/pid/redis_6379.pid
logfile /opt/redis_cluster/redis_6379/logs/redis_6379.log
### 设置数据库的数量，默认数据库为0
databases 16
### 指定本地持久化文件的文件名
dbfilename redis_6379.rdb
### 本地数据库目录，主要用于存储rdb文件
dir /data/redis_cluster/redis_6379
### 是否打开aof日志功能
appendonly yes
# 每1个命令，都立即同步到aof
appendfsync always
# 每秒写1次
appendfsync everysec
# 写入工作交给操作系统，由操作系统判断缓冲区大小，统一写入到aof
appendfilename "appendonly.aof"

#############################################  哨兵  #############################################
6379实例
daemonize yes
bind 10.0.0.87 127.0.0.1
port 6379
pidfile /opt/redis_cluster/redis_6379/pid/redis_6379.pid
logfile /opt/redis_cluster/redis_6379/logs/redis_6379.log
databases 16
dbfilename redis_6379.rdb
dir /data/redis_cluster/redis_6379


daemonize yes
bind 110.0.0.88 127.0.0.1
slaveof 10.0.0.87 6379
port 6379
pidfile /opt/redis_cluster/redis_6379/pid/redis_6379.pid
logfile /opt/redis_cluster/redis_6379/logs/redis_6379.log
databases 16
dbfilename redis_6379.rdb
dir /data/redis_cluster/redis_6379

26379实例
daemonize yes
bind 10.0.0.87 127.0.0.1
port 26379
logfile /opt/redis_cluster/redis_26379/logs/redis_26379.log
dir /data/redis_cluster/redis_26379

sentinel monitor mymaster 10.0.0.87 6379 2
sentinel down-after-milliseconds mymaster 3000
sentinel parallel-syncs mymaster 1
sentinel failover-timeout mymaster 18000


daemonize yes
bind 10.0.0.88 127.0.0.1
port 26379
logfile /opt/redis_cluster/redis_26379/logs/redis_26379.log
dir /data/redis_cluster/redis_26379

sentinel monitor mymaster 10.0.0.87 6379 2
sentinel down-after-milliseconds mymaster 3000
sentinel parallel-syncs mymaster 1
sentinel failover-timeout mymaster 18000



#############################################  集群  #############################################
10.0.0.87节点
#  6380实例
daemonize yes
bind 10.0.0.87 127.0.0.1
port 6380
pidfile "/opt/redis_cluster/redis_6380/pid/redis_6380.pid"
logfile "/opt/redis_cluster/redis_6380/logs/redis_6380.log"
dbfilename "redis_6380.rdb"
dir "/data/redis_cluster/redis_6380"

cluster-enabled yes
cluster-config-file nodes_6380.conf
cluster-node-timeout 15000

#  6381实例
daemonize yes
bind 10.0.0.87 127.0.0.1
port 6381
pidfile "/opt/redis_cluster/redis_6381/pid/redis_6381.pid"
logfile "/opt/redis_cluster/redis_6381/logs/redis_6381.log"
dbfilename "redis_6381.rdb"
dir "/data/redis_cluster/redis_6381"

cluster-enabled yes
cluster-config-file nodes_6381.conf
cluster-node-timeout 15000

10.0.0.88节点
#  6380实例
daemonize yes
bind 10.0.0.88 127.0.0.1
port 6380
pidfile "/opt/redis_cluster/redis_6380/pid/redis_6380.pid"
logfile "/opt/redis_cluster/redis_6380/logs/redis_6380.log"
dbfilename "redis_6380.rdb"
dir "/data/redis_cluster/redis_6380"

cluster-enabled yes
cluster-config-file nodes_6380.conf
cluster-node-timeout 15000

#  6381实例
daemonize yes
bind 10.0.0.88 127.0.0.1
port 6381
pidfile "/opt/redis_cluster/redis_6381/pid/redis_6381.pid"
logfile "/opt/redis_cluster/redis_6381/logs/redis_6381.log"
dbfilename "redis_6381.rdb"
dir "/data/redis_cluster/redis_6381"

cluster-enabled yes
cluster-config-file nodes_6381.conf
cluster-node-timeout 15000


10.0.0.89节点 
#  6380实例
daemonize yes
bind 10.0.0.89 127.0.0.1
port 6380
pidfile "/opt/redis_cluster/redis_6380/pid/redis_6380.pid"
logfile "/opt/redis_cluster/redis_6380/logs/redis_6380.log"
dbfilename "redis_6380.rdb"
dir "/data/redis_cluster/redis_6380"

cluster-enabled yes
cluster-config-file nodes_6380.conf
cluster-node-timeout 15000

#  6381实例
daemonize yes
bind 10.0.0.89 127.0.0.1
port 6381
pidfile "/opt/redis_cluster/redis_6381/pid/redis_6381.pid"
logfile "/opt/redis_cluster/redis_6381/logs/redis_6381.log"
dbfilename "redis_6381.rdb"
dir "/data/redis_cluster/redis_6381"

cluster-enabled yes
cluster-config-file nodes_6381.conf
cluster-node-timeout 15000



#############################################  redis集群节点控制脚本  #############################################
[root@redis01 ~]# cat redis_shell.sh 
#!/bin/bash

USAG(){
    echo "sh $0 {start|stop|restart|login|ps|tail} PORT"
}
if [ "$#" = 1 ]
then
    REDIS_PORT='6379'
elif 
    [ "$#" = 2 -a -z "$(echo "$2"|sed 's#[0-9]##g')" ]
then
    REDIS_PORT="$2"
else
    USAG
    exit 0
fi

REDIS_IP=$(hostname -I|awk '{print $1}')
PATH_DIR=/opt/redis_cluster/redis_${REDIS_PORT}/
PATH_CONF=/opt/redis_cluster/redis_${REDIS_PORT}/conf/redis_${REDIS_PORT}.conf
PATH_LOG=/opt/redis_cluster/redis_${REDIS_PORT}/logs/redis_${REDIS_PORT}.log

CMD_START(){
    redis-server ${PATH_CONF}
}

CMD_SHUTDOWN(){
    redis-cli -c -h ${REDIS_IP} -p ${REDIS_PORT} shutdown
}

CMD_LOGIN(){
    redis-cli -c -h ${REDIS_IP} -p ${REDIS_PORT}
}

CMD_PS(){
    ps -ef|grep redis
}

CMD_TAIL(){
    tail -f ${PATH_LOG}
}

case $1 in
    start)
        CMD_START
        CMD_PS
        ;;
    stop)
        CMD_SHUTDOWN
        CMD_PS
        ;;
    restart)
        CMD_START
        CMD_SHUTDOWN
        CMD_PS
        ;;
    login)
        CMD_LOGIN
        ;;
    ps)
        CMD_PS
        ;;
    tail)
        CMD_TAIL
        ;;
    *)
        USAG
esac

#############################################  redis集群节点数据插入脚本  #############################################
[root@redis01 ~]# cat insert_data_cluster.sh 
#!/bin/bash
for i in $(seq 1 10000)
do
    redis-cli -c -h redis01 -p 6380 set k_${i} v_${i} && echo "set k_${i} is ok"
done

[root@redis01 ~]# cat write.sh 
#!/bin/bash
for i in {1..10000}
do
    redis-cli -c -h redis02 -p 6380 set k_${i} v_${i}
    echo "k_${i}"
    sleep 0.5
done

[root@redis01 ~]# cat input_key.sh 
#!/bin/bash
for i in $(seq 1 1000)
do
    redis-cli -c -h redis01 -p 6379 set zhujialing_k_${i} zhujialing_v_${i} && echo "set zhujialing_k_${i} is ok"
done
#############################################  redis集群节点数据读取脚本  #############################################
[root@redis01 ~]# cat read.sh 
#!/bin/bash
for i in {1..10000}
do
    redis-cli -c -h redis02 -p 6380 get k_${i}
    sleep 0.5
done


#############################################  redis单节点数据转移脚本  #############################################
[root@redis01 ~]# cat redis_6379_to_6380.conf 
[source]
type: single
servers:
- 10.0.0.87:6379

[target]
type: redis cluster
servers:
- 10.0.0.87:6380

[common]
listen: 0.0.0.0:8888
source_safe: true
